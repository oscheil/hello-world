#include <Servo.h>          //Servo motor library. This is standard library
#include <NewPing.h>        //Ultrasonic sensor function library. You must install this library
#include <IRremote.h>
#include <Adafruit_NeoPixel.h>
#ifdef __AVR__
#include <avr/power.h>
#endif

// fuer Neopixel
#define PIN 8
#define AnzahlLEDs 4
#define rot 1
#define green 2
#define white 3
#define blau 4
#define VorneRechts 0
#define VorneLinks 1
#define HintenLinks 3
#define HintenRechts 2

//our L298N control pins
const int LeftMotorForward = 7; // 9;
const int LeftMotorBackward = 8;
const int RightMotorForward = 11; // 6;
const int RightMotorBackward = 9; // 7;
const int PWMRight = 6;
const int PWMLeft = 5; //

//sensor pins
#define trig_pin A1 //analog input 1
#define echo_pin A2 //analog input 2

#define IR_RECV_PIN  12
#define Servo_PIN 13

// für die Car Hardware Identifikation
#define car_decode_pin_0 2
#define car_decode_pin_1 3
#define car_decode_pin_2 4

int carIdent = 0;
int carSpeedL = 180;  // initial speed of car >=0 to <=255
int carSpeedR = 180;
int forwardRightDelay = 0;
boolean remoteOn = true;

#define maximum_distance 200

/* Anschluss an Arduino:
  5 gelb
  7 grün
  8 blau
  9 lia
  11 grau
  6 weiß
*/
#define IR_Remote_DEV_Technisat 1
#define IR_Remote_DEV_Pinnacle 2
#define IR_Remote_DEV_Eleego 3
#define IR_Remote_DEV_Universal 4
#define IR_Remote_DEV_LCDRemote 5
#define IR_Remote_DEV_PCRemote 6
#define IR_Remote_DEV_Makeblock 7

int IR_Remote_DEV = IR_Remote_DEV_Universal;

////////// IR REMOTE CODES //////////

////////// IR REMOTE CODES Technisat //////////
#define auto_on_Technisat 2700
#define auto_off_Technisat 652
#define CSA1 641
#define CSA2 642
#define CSA3 643
#define CSA4 644
#define CSA5 645
#define CSA6 646
#define CSA7 647
#define CSA8 648
#define CSA9 649
#define vor_Technisat 3363236978
#define zurueck_Technisat 3380014599
#define links_Technisat 2239869123
#define rechts_Technisat 2860788123
#define stoppen_Technisat 2475633871
#define vor2_Technisat 2605695303
#define zurueck2_Technisat 2588917682
#define links2_Technisat 1932877326
#define rechts2_Technisat 1311958330
#define stoppen2_Technisat 3493298410

////////// IR REMOTE CODES Pinnacle //////////
#define auto_on_Pinnacle 0x7EAB68DF
#define auto_off_Pinnacle 0x78ECC40D
#define vor_Pinnacle 0x71CAE416
#define zurueck_Pinnacle 0x7C4955E7
#define links_Pinnacle 0x5746DD0F
#define rechts_Pinnacle 0xAA4671E
#define stoppen_Pinnacle 0xAB7814A6
#define vor2_Pinnacle 0x23F85D88
#define zurueck2_Pinnacle 0x30A6E185
#define links2_Pinnacle 0xBA468B1
#define rechts2_Pinnacle 0x5646DB7C
#define stoppen2_Pinnacle 0xC921DD24

////////// IR REMOTE CODES Universal //////////
#define auto_on_Universal 1
#define auto_off_Universal 6
#define vor_Universal 3
#define zurueck_Universal 3
#define links_Universal 2
#define rechts_Universal 2
#define stoppen_Universal 2
#define vor2_Universal 2
#define zurueck2_Universal 2
#define links2_Universal 1
#define rechts2_Universal 1
#define stoppen2_Universal 3

////////// IR REMOTE CODES Eleego //////////
#define auto_on_Eleego 0xFF30CF // 1
#define auto_off_Eleego 0xFF18E7 //2
#define vor_Eleego 0xFF906F
#define zurueck_Eleego 0xFFE01F
#define links_Eleego 0xFF22DD
#define rechts_Eleego 0xFFC23D
#define stoppen_Eleego 0xFF02FD
#define vor2_Eleego 0x2
#define zurueck2_Eleego 0x2
#define links2_Eleego 0x1
#define rechts2_Eleego 0x1
#define stoppen2_Eleego 0x3

////////// IR REMOTE CODES Makeblock //////////
#define auto_on_Makeblock 0xFFA25D // A
#define auto_off_Makeblock 0xFFE21D // C
#define vor_Makeblock 0xFF02FD
#define zurueck_Makeblock 0xFF9867
#define links_Makeblock 0xFFE01F
#define rechts_Makeblock 0xFF906F
#define stoppen_Makeblock 0xFFA857
#define vor2_Makeblock 0x2
#define zurueck2_Makeblock 0x2
#define links2_Makeblock 0x1
#define rechts2_Makeblock 0x1
#define stoppen2_Makeblock 0x3

////////// IR REMOTE CODES LCDRemote //////////
#define auto_on_LCDRemote 0x61D648B7
#define auto_off_LCDRemote 0x6
#define vor_LCDRemote 0x61D6D827
#define zurueck_LCDRemote 0x61D658A7
#define links_LCDRemote 0x61D620DF
#define rechts_LCDRemote 0x61D6609F
#define stoppen_LCDRemote 0x61D6A05F
#define vor2_LCDRemote 0x2
#define zurueck2_LCDRemote 0x2
#define links2_LCDRemote 0x1
#define rechts2_LCDRemote 0x1
#define stoppen2_LCDRemote 0x3

////////// IR REMOTE CODES PCRemote //////////
#define auto_on_PCRemote 0xC157DE81
#define auto_off_PCRemote 0x3
#define vor_PCRemote 0xFD822A51
#define zurueck_PCRemote 0x1304DA8D
#define links_PCRemote 0x4C06E3EB
#define rechts_PCRemote 0xC9B62F1F
#define stoppen_PCRemote 0x5EF4863
#define vor2_PCRemote 0xE2C8
#define zurueck2_PCRemote 0xE286
#define links2_PCRemote 0xE218
#define rechts2_PCRemote 0xE210
#define stoppen2_PCRemote 0xE208

// unsigned long Forward_Code;
unsigned long auto_on;
unsigned long auto_off;
unsigned long vor;
unsigned long zurueck;
unsigned long links;
unsigned long rechts;
unsigned long stoppen;
unsigned long vor2;
unsigned long zurueck2;
unsigned long links2;
unsigned long rechts2;
unsigned long stoppen2;

IRrecv irrecv(IR_RECV_PIN);
decode_results results;
unsigned long val;
unsigned long preMillis;

Adafruit_NeoPixel strip = Adafruit_NeoPixel(AnzahlLEDs, PIN, NEO_GRB + NEO_KHZ800);



int distance = 100;
NewPing sonar(trig_pin, echo_pin, maximum_distance); //sensor function
Servo servo_motor; //our servo name

void carHardwareconfig (int car) {
  carSpeedL = 180;
  carSpeedR = 180;
  switch (car) {
    case 0:
      break;
    case 1:
      IR_Remote_DEV = IR_Remote_DEV_Makeblock;
      Serial.println("Leo");
      carSpeedL = 210;
      carSpeedR = 230;
      break;
    case 2:
      break;
    case 3:
      carSpeedL = 180;
      IR_Remote_DEV = IR_Remote_DEV_Pinnacle;
      Serial.println("Schüler 3");
      break;
    case 4:
      IR_Remote_DEV = IR_Remote_DEV_Technisat;
      Serial.println("Schüler 4");
      carSpeedL = 210;
      carSpeedR = 230;
      break;
    case 5:
      IR_Remote_DEV = IR_Remote_DEV_Technisat;
      Serial.println("Schüler 5");
      break;
    case 6:
      IR_Remote_DEV = IR_Remote_DEV_Eleego;
      Serial.println("Schüler 6");
      forwardRightDelay = 50;
      break;
    case 7:
      IR_Remote_DEV = IR_Remote_DEV_Technisat;
      carSpeedR = 210;
      Serial.println("Eric");
      break;

    default: break;
  };
}

void irConfig (int remote_dev) {
  carSpeedL = 180;
  carSpeedR = 180;
  switch (remote_dev) {
    case IR_Remote_DEV_Technisat:
      auto_on = auto_on_Technisat;
      auto_off = auto_off_Technisat;
      vor = vor_Technisat;
      zurueck = zurueck_Technisat;
      links = links_Technisat;
      rechts = rechts_Technisat;
      stoppen = stoppen_Technisat;
      vor2 = vor2_Technisat;
      zurueck2 = zurueck2_Technisat;
      links2 = links2_Technisat;
      rechts2 = rechts2_Technisat;
      stoppen2 = stoppen2_Technisat;
      break;
    case IR_Remote_DEV_Pinnacle:
      auto_on = auto_on_Pinnacle;
      auto_off = auto_off_Pinnacle;
      vor = vor_Pinnacle;
      zurueck = zurueck_Pinnacle;
      links = links_Pinnacle;
      rechts = rechts_Pinnacle;
      stoppen = stoppen_Pinnacle;
      vor2 = vor2_Pinnacle;
      zurueck2 = zurueck2_Pinnacle;
      links2 = links2_Pinnacle;
      rechts2 = rechts2_Pinnacle;
      stoppen2 = stoppen2_Pinnacle;
      break;
    case IR_Remote_DEV_Universal:
      auto_on = auto_on_Universal;
      auto_off = auto_off_Universal;
      vor = vor_Universal;
      zurueck = zurueck_Universal;
      links = links_Universal;
      rechts = rechts_Universal;
      stoppen = stoppen_Universal;
      vor2 = vor2_Universal;
      zurueck2 = zurueck2_Universal;
      links2 = links2_Universal;
      rechts2 = rechts2_Universal;
      stoppen2 = stoppen2_Universal;
      break;
    case IR_Remote_DEV_Eleego:
      auto_on = auto_on_Eleego;
      auto_off = auto_off_Eleego;
      vor = vor_Eleego;
      zurueck = zurueck_Eleego;
      links = links_Eleego;
      rechts = rechts_Eleego;
      stoppen = stoppen_Eleego;
      vor2 = vor2_Eleego;
      zurueck2 = zurueck2_Eleego;
      links2 = links2_Eleego;
      rechts2 = rechts2_Eleego;
      stoppen2 = stoppen2_Eleego;
      break;
    case IR_Remote_DEV_Makeblock:
      auto_on = auto_on_Makeblock;
      auto_off = auto_off_Makeblock;
      vor = vor_Makeblock;
      zurueck = zurueck_Makeblock;
      links = links_Makeblock;
      rechts = rechts_Makeblock;
      stoppen = stoppen_Makeblock;
      vor2 = vor2_Makeblock;
      zurueck2 = zurueck2_Makeblock;
      links2 = links2_Makeblock;
      rechts2 = rechts2_Makeblock;
      stoppen2 = stoppen2_Makeblock;
      break;

    case IR_Remote_DEV_LCDRemote:
      auto_on = auto_on_LCDRemote;
      auto_off = auto_off_LCDRemote;
      vor = vor_LCDRemote;
      zurueck = zurueck_LCDRemote;
      links = links_LCDRemote;
      rechts = rechts_LCDRemote;
      stoppen = stoppen_LCDRemote;
      vor2 = vor2_LCDRemote;
      zurueck2 = zurueck2_LCDRemote;
      links2 = links2_LCDRemote;
      rechts2 = rechts2_LCDRemote;
      stoppen2 = stoppen2_LCDRemote;
      break;

    case IR_Remote_DEV_PCRemote:
      auto_on = auto_on_PCRemote;
      auto_off = auto_off_PCRemote;
      vor = vor_PCRemote;
      zurueck = zurueck_PCRemote;
      links = links_PCRemote;
      rechts = rechts_PCRemote;
      stoppen = stoppen_PCRemote;
      vor2 = vor2_PCRemote;
      zurueck2 = zurueck2_PCRemote;
      links2 = links2_PCRemote;
      rechts2 = rechts2_PCRemote;
      stoppen2 = stoppen2_PCRemote;
      break;

    default: break;
  };
}


void setup() {
  Serial.begin(9600);

  strip.begin();
  strip.show(); // Initialize all pixels to 'off'

  pinMode(PWMRight, OUTPUT);
  pinMode(PWMLeft, OUTPUT);

  pinMode(RightMotorForward, OUTPUT);
  pinMode(LeftMotorForward, OUTPUT);
  pinMode(LeftMotorBackward, OUTPUT);
  pinMode(RightMotorBackward, OUTPUT);

  digitalWrite(PWMRight, HIGH);
  digitalWrite(PWMLeft, HIGH);

  pinMode (car_decode_pin_0, INPUT_PULLUP);
  pinMode (car_decode_pin_1, INPUT_PULLUP);
  pinMode (car_decode_pin_2, INPUT_PULLUP);


  // car identifizieren:
  if (digitalRead(car_decode_pin_0)) {
    carIdent = 1;
  }
  if (digitalRead(car_decode_pin_1)) {
    carIdent = carIdent + 2;
  }
  if (digitalRead(car_decode_pin_2)) {
    carIdent = carIdent + 4;
  }

  Serial.println(carIdent);
  carHardwareconfig (carIdent);
  irConfig (IR_Remote_DEV);

  servo_motor.attach(Servo_PIN); //our servo pin

  servo_motor.write(90);
  delay(2000);

  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  distance = readPing();
  delay(100);
  stopp();
  irrecv.enableIRIn();
}

void Lampensteuerung(int position, int Farbe)
{
  uint32_t c;
  int intensi = 1;
  switch (Farbe)
  {
    case rot:
      {
        Serial.println("rot");
        //    c= strip.Color(255, 0, 0);
        //    strip.setPixelColor(0, (strip.Color(0, 0, 255)), 50); // Red
        //   strip.setPixelColor(0, c); // Red

        strip.setPixelColor(position, 255, 0, 0, intensi); // Red
        break;
      }
    case green:
      {
        Serial.println("green");
        strip.setPixelColor(position, 0, 255, 0, intensi); // green
        break;
      }
    case white:
      {
        Serial.println("white");
        strip.setPixelColor(position, 255, 255, 255, intensi); // weiss

        break;
      }
    case blau:
      {
        Serial.println("blau");
        strip.setPixelColor(position, 0, 0, 255, intensi); // blau

        break;

      }

    default:
      {
        Serial.println("break");
        strip.setPixelColor(2, (strip.Color(255, 0, 0), intensi)); // Red

        break;
      }
  }
  strip.show();
}

void calibrateCarspeed(int val) {
  switch (val) {
    case CSA1:
      carSpeedR = 200;
      carSpeedL = 150;
      break;
    case CSA2:
      carSpeedR = 150;
      carSpeedL = 200;
      break;
    case CSA3:
      carSpeedR = 130;
      carSpeedL = 220;
      break;
    case CSA4:
      carSpeedR = 220;
      carSpeedL = 130;
      break;
    case CSA5:
      carSpeedR = 255;
      carSpeedL = 125;
      break;
    case CSA6:
      carSpeedR = 255;
      carSpeedL = 150;
      break;

    default: break;
  }
}

void automatikBetrieb()
{
  int distanceRight = 0;
  int distanceLeft = 0;
  delay(50);

  if (distance <= 50) {
    stopp();
    delay(300);
    back();
    delay(400);
    stopp();
    delay(300);
    distanceRight = lookRight();
    delay(300);
    distanceLeft = lookLeft();
    delay(300);

    if (distance >= distanceLeft) {
      turnRight();
      stopp();
    }
    else {
      turnLeft();
      stopp();
    }
  }
  else {
    forward();
  }
  distance = readPing();
  Serial.print("Distance: ");
  Serial.println(distance);
  Serial.print("DistanceLeft: ");
  Serial.println(distanceLeft);
  Serial.print("DistanceRight: ");
  Serial.println(distanceRight);
}



void loop() {
  if (irrecv.decode(&results)) {
    preMillis = millis();
    val = results.value;
    Serial.println(val, HEX);
    irrecv.resume();

    calibrateCarspeed(val);

    if (val == auto_on) {
      remoteOn = false;
    }
    if (val == auto_off) {
      remoteOn = true;
    }
    if ((val == vor) or (val == vor2)) {
      forward();
    }
    if ((val == zurueck) or (val == zurueck2)) {
      back();
    }
    if ((val == links) or (val == links2)) {
      left();
    }
    if ((val == rechts) or (val == rechts2)) {
      right();
    }
    if ((val == stoppen) or (val == stoppen2)) {
      stopp();
      remoteOn = true;
    }
  }
  else {
    if (millis() - preMillis > 500) {
      stopp();
      preMillis = millis();
    }
  }

  if (!remoteOn) {
    automatikBetrieb();
  }
}

void forward() {
  //  digitalWrite(PWMLeft,HIGH);
  //  digitalWrite(PWMRight,HIGH);
  Lampensteuerung(VorneRechts, white);
  Lampensteuerung(VorneLinks, white);
  analogWrite(PWMLeft, carSpeedL);
  analogWrite(PWMRight, carSpeedR);

  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorBackward, LOW);
  delay (forwardRightDelay);
  digitalWrite(RightMotorForward, HIGH);
  Serial.println("go forward!");
}
void back() {
  //  digitalWrite(PWMLeft,HIGH);
  //  digitalWrite(PWMRight,HIGH);
  Lampensteuerung(HintenRechts, rot);
  Lampensteuerung(HintenLinks, rot);
  analogWrite(PWMLeft, carSpeedL);
  analogWrite(PWMRight, carSpeedR);

  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(LeftMotorBackward, HIGH);
  digitalWrite(RightMotorBackward, HIGH);
  digitalWrite(RightMotorForward, LOW);
  Serial.println("go back!");
}
void left() {
  Lampensteuerung(VorneLinks,rot);
  analogWrite(PWMLeft, carSpeedL);
  analogWrite(PWMRight, carSpeedR);
  digitalWrite(LeftMotorForward, LOW);
  digitalWrite(LeftMotorBackward, HIGH);
  digitalWrite(RightMotorBackward, LOW);
  digitalWrite(RightMotorForward, HIGH);
  Serial.println("go left!");
}
void right() {
  Lampensteuerung(VorneRechts,rot);
  analogWrite(PWMLeft, carSpeedL);
  analogWrite(PWMRight, carSpeedR);
  digitalWrite(LeftMotorForward, HIGH);
  digitalWrite(LeftMotorBackward, LOW);
  digitalWrite(RightMotorBackward, HIGH);
  digitalWrite(RightMotorForward, LOW);
  Serial.println("go right!");
}
void stopp() {

   strip.clear();
   strip.show();

  digitalWrite(PWMLeft, LOW);
  digitalWrite(PWMRight, LOW);
  //  Serial.println("STOP!");
}


int lookRight() {
  servo_motor.write(10);
  delay(500);
  int distance = readPing();
  delay(100);
  servo_motor.write(90);
  return distance;
}

int lookLeft() {
  servo_motor.write(170);
  delay(500);
  int distance = readPing();
  delay(100);
  servo_motor.write(90);
  return distance;
  delay(100);
}

int readPing() {
  delay(70);
  int cm = sonar.ping_cm();
  if (cm == 0) {
    cm = 250;
  }
  return cm;
}

void turnRight() {
  right();
  delay(250);
  forward();
}

void turnLeft() {
  left();
  delay(250);
  forward();
}
